# PWA Note 文件上传功能重构 - Vercel Blob存储方案

## 项目概述
将 PWA Note 应用的文件上传功能从 Base64 数据库存储重构为 Vercel Blob 存储，提升性能、减少数据库负载，并去除冗余逻辑。

## 问题陈述
当前 PWA Note 应用的文件上传功能存在以下问题：
1. **Base64 存储问题**：导致数据库体积过大，影响查询性能
2. **内存和传输负载**：大文件的 Base64 编码增加内存使用和传输时间
3. **复杂的冗余逻辑**：存在分块上传、队列处理等不必要的复杂机制
4. **缩略图处理复杂**：生成和存储逻辑复杂，影响用户体验
5. **数据库连接问题**：大文件上传时容易导致数据库连接超时
6. **性能瓶颈**：文件加载和显示速度慢

## 目标和目的
1. **集成 Vercel Blob 存储**：替代 Base64 数据库存储方案
2. **简化上传流程**：去除冗余的队列和分块逻辑
3. **优化缩略图机制**：改进生成和存储策略
4. **提升文件性能**：加快上传和加载速度
5. **减少数据库负载**：降低存储成本和查询压力
6. **保持功能完整性**：确保现有用户体验不受影响

## 技术栈
- **存储服务**: Vercel Blob Storage
- **前端**: Next.js 15, React 19, TypeScript
- **数据库**: PostgreSQL (Neon)
- **文件处理**: Canvas API (缩略图生成)
- **UI组件**: Radix UI, Tailwind CSS

## 现有实现分析
### 当前Base64存储架构
1. **文件转换**：使用 `lib/base64-utils.ts` 将文件转为Base64
2. **复杂上传流程**：包含队列、分块、异步处理等机制
3. **数据库存储**：直接在 `files` 表的 `base64_data` 字段存储
4. **缩略图生成**：客户端生成并存储为Base64
5. **文件检索**：从数据库读取Base64并转换为可用URL

### 需要移除的冗余逻辑
1. **分块上传机制** (`app/actions/chunked-upload.ts`)
2. **复杂队列处理** (`components/sync-provider.tsx` 中的异步队列)
3. **Base64转换工具** (`lib/base64-utils.ts` 的部分功能)
4. **临时文件处理** (临时URL和异步处理逻辑)

## 功能和需求

### 核心功能
1. **Vercel Blob 文件上传**
   - 图片直接上传到 Vercel Blob 存储
   - 文档直接上传到 Vercel Blob 存储
   - 支持拖拽和点击上传
   - 获取 Blob URL 用于访问

2. **文件类型支持**
   - 图片：JPEG, PNG, GIF, WebP (最大 5MB)
   - 文档：PDF, DOC, DOCX, TXT, XLS, XLSX, CSV (最大 10MB)

3. **简化的上传流程**
   - 移除复杂的队列处理逻辑
   - 移除分块上传机制
   - 直接上传到 Vercel Blob
   - 在数据库中只存储 Blob URL 和元数据

4. **优化的缩略图处理**
   - 对图片生成高质量缩略图
   - 缩略图也存储在 Vercel Blob
   - 在数据库中存储缩略图 URL

### 技术要求
1. **Vercel Blob 集成**
   - 安装和配置 @vercel/blob 包
   - 设置 BLOB_READ_WRITE_TOKEN 环境变量
   - 实现文件上传到 Blob 的 API

2. **数据库结构调整**
   - 移除 base64_data 字段
   - 添加 blob_url 字段存储 Blob URL
   - 添加 thumbnail_url 字段存储缩略图 URL
   - 保留文件元数据字段 (name, type, size, user_id, uploaded_at)

3. **前端逻辑简化**
   - 移除 Base64 转换逻辑
   - 移除复杂的异步处理队列
   - 直接使用 FormData 上传文件
   - 简化文件预览和下载逻辑

4. **API 重构**
   - 重写文件上传 API 使用 Vercel Blob
   - 简化文件检索 API
   - 移除分块上传相关 API
   - 优化错误处理

### 性能要求
1. **上传性能**
   - 文件上传响应时间 < 5秒（5MB文件）
   - 支持并发上传
   - 上传进度显示

2. **加载性能**
   - 文件列表加载时间 < 2秒
   - 缩略图加载时间 < 1秒
   - 支持懒加载

3. **存储优化**
   - 减少数据库存储空间 90%
   - 提升数据库查询性能
   - 降低内存使用

### 安全要求
1. **文件验证**
   - 严格的文件类型检查
   - 文件大小限制
   - 恶意文件检测

2. **访问控制**
   - 用户只能访问自己的文件
   - Blob URL 访问权限控制
   - 防止未授权下载

### 兼容性要求
1. **现有数据迁移**
   - 提供 Base64 到 Blob 的迁移脚本
   - 保持现有文件的可访问性
   - 渐进式迁移策略

2. **API 兼容性**
   - 保持前端接口不变
   - 向后兼容现有文件引用
   - 平滑的用户体验过渡

## 成功指标
1. **性能提升**
   - 文件上传速度提升 50%
   - 数据库查询速度提升 80%
   - 内存使用减少 70%

2. **用户体验**
   - 上传成功率 > 99%
   - 用户满意度提升
   - 错误率降低 90%

3. **系统稳定性**
   - 数据库连接超时问题解决
   - 大文件上传稳定性提升
   - 系统资源使用优化

## 风险和缓解措施
1. **数据迁移风险**
   - 风险：现有 Base64 数据丢失
   - 缓解：完整的备份和测试策略

2. **Vercel Blob 依赖风险**
   - 风险：外部服务依赖
   - 缓解：实现降级方案和监控

3. **成本风险**
   - 风险：Blob 存储成本增加
   - 缓解：成本监控和优化策略

## 实施计划
1. **阶段1**: Vercel Blob 集成和基础 API
2. **阶段2**: 前端上传逻辑重构
3. **阶段3**: 数据库结构调整和迁移
4. **阶段4**: 冗余逻辑清理和优化
5. **阶段5**: 测试和部署

## 验收标准
1. 所有文件类型都能成功上传到 Vercel Blob
2. 文件上传和下载功能正常工作
3. 缩略图生成和显示正常
4. 数据库中不再存储 Base64 数据
5. 移除所有冗余的上传逻辑
6. 性能指标达到预期目标
7. 现有文件数据成功迁移

## 环境配置
- BLOB_READ_WRITE_TOKEN: vercel_blob_rw_E5Drwe7q8NqrXKbH_SReEDjQlwgTn9hEbggYt8MWxiD9xsC
